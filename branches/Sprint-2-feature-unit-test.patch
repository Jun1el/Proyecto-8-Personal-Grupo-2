From 6382e3942f6df57d10326bb1a573e53f32d53191 Mon Sep 17 00:00:00 2001
From: Jun1el <latorrevasquezandressebastian@gmail.com>
Date: Sat, 14 Jun 2025 21:02:53 -0500
Subject: [PATCH] update[#18]: actualizar requirements.txt y .gitignore

---
 .gitignore       | 3 ++-
 requirements.txt | 8 ++++++++
 2 files changed, 10 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index 706d977..1a7a5ff 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,4 +1,5 @@
 *.pyc
 pycache/
 .venv/
-__pycache__/
\ No newline at end of file
+__pycache__/
+.env/
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index e69de29..55eeb3c 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -0,0 +1,8 @@
+exceptiongroup==1.3.0
+iniconfig==2.1.0
+packaging==25.0
+pluggy==1.6.0
+Pygments==2.19.1
+pytest==8.4.0
+tomli==2.2.1
+typing_extensions==4.14.0
-- 
2.34.1

From 4d946e0e8a1417d7a70e6541b7fcdfb9168d07a9 Mon Sep 17 00:00:00 2001
From: Jun1el <latorrevasquezandressebastian@gmail.com>
Date: Sat, 14 Jun 2025 21:03:24 -0500
Subject: [PATCH] test[#18]: Agregar pruebas unitarias para
 calcular_metricas.py

---
 tests/test_calcular_metricas.py | 101 ++++++++++++++++++++++++++++++++
 1 file changed, 101 insertions(+)
 create mode 100644 tests/test_calcular_metricas.py

diff --git a/tests/test_calcular_metricas.py b/tests/test_calcular_metricas.py
new file mode 100644
index 0000000..8aa24d6
--- /dev/null
+++ b/tests/test_calcular_metricas.py
@@ -0,0 +1,101 @@
+import os
+import csv
+import json
+import pytest
+from unittest.mock import patch, mock_open
+from src.calcular_metricas import registrar_git_log, escribir_csv, calcular_lead_time
+
+
+# Test 1: Mock de simulacion de git log 
+@patch("subprocess.run")
+def test_registrar_git_log_mock(mock_run):
+    # definimos una salida simulada de git log
+    mock_run.return_value.stdout = "abc123|2025-06-12 10:00:00 |feat[#1]: mensaje de prueba"
+    mock_run.return_value.returncode = 0
+
+    commits = registrar_git_log()
+    # validamos que se capturo la entrada que definimos
+    assert len(commits) == 1
+    assert commits[0][0] == "abc123"
+    assert "mensaje de prueba" in commits[0][2]
+
+
+# Test 2: Probar escribir_csv con datos simulados
+def test_escribir_csv(tmp_path):
+    # datos simulados de commits
+    dummy_commits = [
+        ("abc123", "2025-06-12 10:00:00 ", "fix[#2]: error corregido"),
+        ("def456", "2025-06-13 11:00:00 ", "feat[#3]: nueva funcionalidad")
+    ]
+    output_file = tmp_path / "commits.csv"
+    escribir_csv(dummy_commits, output_file)
+
+    # validamos el contenido del archivo generado
+    with open(output_file, newline='') as f:
+        reader = list(csv.reader(f))
+        assert reader[0] == ['commit_hash', 'fecha', 'tipo_de_issue']
+        assert reader[1] == list(dummy_commits[0])
+        assert reader[2] == list(dummy_commits[1])
+
+
+# Test 3: calcular_lead_time con un issue cerrado
+def test_calcular_lead_time_closed(tmp_path):
+    issues_data = [
+        {
+            "id": 1,
+            "state": "closed",
+            "created_at": "2025-06-07T12:00:00",
+            "closed_at": "2025-06-07T15:00:00"
+        }
+    ]
+    issues_path = tmp_path / "issues.json"
+    output_path = tmp_path / "lead_time.csv"
+
+    with open(issues_path, 'w') as f:
+        json.dump(issues_data, f)
+
+    result = calcular_lead_time(str(issues_path), str(output_path))
+    # validamos que el resultado contenga un solo issue con lead time de 3 horas
+    assert len(result) == 1
+    assert result[0][0] == 1
+    assert round(result[0][1], 2) == 3.0  # 3 horas exactas
+
+    # verificamos el csv creado
+    with open(output_path, newline='') as f:
+        rows = list(csv.reader(f))
+        assert rows[0] == ["issue_id", "lead_time_hours"]
+        assert int(rows[1][0]) == 1
+        assert abs(float(rows[1][1]) - 3.0) < 0.01
+
+
+# Test 4: calcular_lead_time ignora issue abierto
+def test_calcular_lead_time_abierto(tmp_path):
+    issues_data = [
+        {
+            "id": 2,
+            "state": "open",
+            "created_at": "2025-06-07T12:00:00Z",
+            "closed_at": None
+        }
+    ]
+    # escribimos el archivo simulado
+    issues_path = tmp_path / "issues.json"
+    output_path = tmp_path / "lead_time.csv"
+
+    with open(issues_path, 'w') as f:
+        json.dump(issues_data, f)
+
+    result = calcular_lead_time(str(issues_path), str(output_path))
+    # la lista debe estar vacia ya que el issue esta abierto
+    assert result == []
+
+
+# Test 5: calcular_lead_time con JSON malformado
+def test_calcular_lead_time_json_invalido(tmp_path):
+    bad_json_path = tmp_path / "bad_issues.json"
+    
+    bad_json_path.write_text("{malformed_json")
+    
+    # ejecutamos y verificamos que devuelva una lista vacia sin lanzar excepcion
+    result = calcular_lead_time(str(bad_json_path))
+    assert result == []
-- 
2.34.1

